'use client';
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _react = _interopRequireWildcard(require("react"));
var _pick = _interopRequireDefault(require("lodash/pick"));
var _MonthDropdown = _interopRequireDefault(require("./MonthDropdown"));
var _TimeDropdown = _interopRequireDefault(require("./TimeDropdown"));
var _CalendarBody = _interopRequireDefault(require("./CalendarBody"));
var _CalendarHeader = _interopRequireDefault(require("./CalendarHeader"));
var _hooks = require("../internals/hooks");
var _date = require("../internals/utils/date");
var _CalendarContext = require("./CalendarContext");
var _useCalendarState2 = _interopRequireWildcard(require("./useCalendarState"));
var _AngleUp = _interopRequireDefault(require("@rsuite/icons/legacy/AngleUp"));
var _excluded = ["as", "className", "classPrefix", "calendarDate", "dateRange", "disabledBackward", "defaultState", "disabledForward", "format", "hoverRangeValue", "inline", "isoWeek", "weekStart", "targetId", "limitEndYear", "limitStartYear", "locale", "monthDropdownProps", "showMeridian", "showWeekNumbers", "cellClassName", "disabledDate", "onChangeMonth", "onChangeTime", "onMouseMove", "onMoveBackward", "onMoveForward", "onSelect", "onToggleMeridian", "onToggleMonthDropdown", "onToggleTimeDropdown", "renderCell", "renderCellOnPicker", "renderTitle", "renderToolbar"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var CalendarContainer = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'div' : _props$as,
    className = props.className,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'calendar' : _props$classPrefix,
    calendarDateProp = props.calendarDate,
    dateRange = props.dateRange,
    disabledBackward = props.disabledBackward,
    defaultState = props.defaultState,
    disabledForward = props.disabledForward,
    format = props.format,
    hoverRangeValue = props.hoverRangeValue,
    inline = props.inline,
    _props$isoWeek = props.isoWeek,
    isoWeek = _props$isoWeek === void 0 ? false : _props$isoWeek,
    _props$weekStart = props.weekStart,
    weekStart = _props$weekStart === void 0 ? 0 : _props$weekStart,
    targetId = props.targetId,
    limitEndYear = props.limitEndYear,
    limitStartYear = props.limitStartYear,
    locale = props.locale,
    monthDropdownProps = props.monthDropdownProps,
    showMeridian = props.showMeridian,
    showWeekNumbers = props.showWeekNumbers,
    cellClassName = props.cellClassName,
    disabledDate = props.disabledDate,
    onChangeMonth = props.onChangeMonth,
    onChangeTime = props.onChangeTime,
    onMouseMove = props.onMouseMove,
    onMoveBackward = props.onMoveBackward,
    onMoveForward = props.onMoveForward,
    onSelect = props.onSelect,
    onToggleMeridian = props.onToggleMeridian,
    onToggleMonthDropdown = props.onToggleMonthDropdown,
    onToggleTimeDropdown = props.onToggleTimeDropdown,
    renderCell = props.renderCell,
    renderCellOnPicker = props.renderCellOnPicker,
    renderTitle = props.renderTitle,
    renderToolbar = props.renderToolbar,
    rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  var _useClassNames = (0, _hooks.useClassNames)(classPrefix),
    withClassPrefix = _useClassNames.withClassPrefix,
    merge = _useClassNames.merge,
    prefix = _useClassNames.prefix;
  var _useCalendarState = (0, _useCalendarState2.default)(defaultState),
    calendarState = _useCalendarState.calendarState,
    reset = _useCalendarState.reset,
    openMonth = _useCalendarState.openMonth,
    openTime = _useCalendarState.openTime;
  var calendarDate = (0, _react.useMemo)(function () {
    return (0, _date.isValid)(calendarDateProp) ? calendarDateProp : new Date();
  }, [calendarDateProp]);
  var isDateDisabled = (0, _hooks.useEventCallback)(function (date) {
    var _disabledDate;
    return (_disabledDate = disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date)) !== null && _disabledDate !== void 0 ? _disabledDate : false;
  });
  var isTimeDisabled = function isTimeDisabled(date) {
    return (0, _date.disableTime)(props, date);
  };
  var handleMoveForward = (0, _hooks.useEventCallback)(function () {
    onMoveForward === null || onMoveForward === void 0 ? void 0 : onMoveForward((0, _date.addMonths)(calendarDate, 1));
  });
  var handleMoveBackward = (0, _hooks.useEventCallback)(function () {
    onMoveBackward === null || onMoveBackward === void 0 ? void 0 : onMoveBackward((0, _date.addMonths)(calendarDate, -1));
  });

  // It is displayed as the month to be selected.
  var toggleMonthView = (0, _hooks.useEventCallback)(function () {
    if (calendarState === _useCalendarState2.CalendarState.MONTH) {
      reset();
    } else {
      openMonth();
    }
    onToggleMonthDropdown === null || onToggleMonthDropdown === void 0 ? void 0 : onToggleMonthDropdown(calendarState !== _useCalendarState2.CalendarState.MONTH);
  });

  // It is displayed as a time to be selected.
  var toggleTimeView = (0, _hooks.useEventCallback)(function () {
    if (calendarState === _useCalendarState2.CalendarState.TIME) {
      reset();
    } else {
      openTime();
    }
    onToggleTimeDropdown === null || onToggleTimeDropdown === void 0 ? void 0 : onToggleTimeDropdown(calendarState !== _useCalendarState2.CalendarState.TIME);
  });
  var handleCloseDropdown = (0, _hooks.useEventCallback)(function () {
    return reset();
  });
  var renderDate = (0, _date.shouldRenderDate)(format);
  var renderTime = (0, _date.shouldRenderTime)(format);
  var renderMonth = (0, _date.shouldRenderMonth)(format);
  var onlyShowTime = renderTime && !renderDate && !renderMonth;
  var onlyShowMonth = renderMonth && !renderDate && !renderTime;
  var showTime = calendarState === _useCalendarState2.CalendarState.TIME || onlyShowTime;
  var showMonth = calendarState === _useCalendarState2.CalendarState.MONTH || onlyShowMonth;
  var inSameThisMonthDate = function inSameThisMonthDate(date) {
    return (0, _date.isSameMonth)(calendarDate, date);
  };
  var calendarClasses = merge(className, withClassPrefix({
    'time-view': showTime,
    'month-view': showMonth,
    'show-week-numbers': showWeekNumbers
  }));
  var timeDropdownProps = (0, _pick.default)(rest, _date.calendarOnlyProps);
  var handleChangeMonth = (0, _hooks.useEventCallback)(function (date, event) {
    reset();
    onChangeMonth === null || onChangeMonth === void 0 ? void 0 : onChangeMonth(date, event);
  });
  var contextValue = {
    date: calendarDate,
    dateRange: dateRange,
    format: format,
    hoverRangeValue: hoverRangeValue,
    inline: inline,
    isoWeek: isoWeek,
    weekStart: weekStart,
    targetId: targetId,
    locale: locale,
    showWeekNumbers: showWeekNumbers,
    monthDropdownProps: monthDropdownProps,
    cellClassName: cellClassName,
    disabledDate: isDateDisabled,
    inSameMonth: inSameThisMonthDate,
    onChangeMonth: handleChangeMonth,
    onChangeTime: onChangeTime,
    onMouseMove: onMouseMove,
    onSelect: onSelect,
    renderCell: renderCell,
    renderCellOnPicker: renderCellOnPicker
  };
  return /*#__PURE__*/_react.default.createElement(_CalendarContext.CalendarProvider, {
    value: contextValue
  }, /*#__PURE__*/_react.default.createElement(Component, (0, _extends2.default)({
    "data-testid": "calendar"
  }, (0, _date.omitHideDisabledProps)(rest), {
    className: calendarClasses,
    ref: ref
  }), /*#__PURE__*/_react.default.createElement(_CalendarHeader.default, {
    showMonth: renderMonth,
    showDate: renderDate,
    showTime: renderTime,
    showMeridian: showMeridian,
    disabledTime: isTimeDisabled,
    onMoveForward: handleMoveForward,
    onMoveBackward: handleMoveBackward,
    onToggleMonthDropdown: toggleMonthView,
    onToggleTimeDropdown: toggleTimeView,
    onToggleMeridian: onToggleMeridian,
    renderTitle: renderTitle,
    renderToolbar: renderToolbar,
    disabledBackward: disabledBackward,
    disabledForward: disabledForward
  }), renderDate && /*#__PURE__*/_react.default.createElement(_CalendarBody.default, null), renderMonth && /*#__PURE__*/_react.default.createElement(_MonthDropdown.default, {
    show: showMonth,
    limitEndYear: limitEndYear,
    limitStartYear: limitStartYear,
    disabledMonth: isDateDisabled
  }), renderTime && /*#__PURE__*/_react.default.createElement(_TimeDropdown.default, (0, _extends2.default)({}, timeDropdownProps, {
    show: showTime,
    showMeridian: showMeridian
  })), (showMonth || showTime) && renderDate && /*#__PURE__*/_react.default.createElement("button", {
    className: prefix('btn-close'),
    onClick: handleCloseDropdown,
    "aria-label": "Collapse " + (showMonth ? 'month' : 'time') + " view"
  }, /*#__PURE__*/_react.default.createElement(_AngleUp.default, null))));
});
CalendarContainer.displayName = 'CalendarContainer';
var _default = exports.default = CalendarContainer;