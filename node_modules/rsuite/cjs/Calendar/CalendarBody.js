'use client';
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _react = _interopRequireDefault(require("react"));
var _date = require("../internals/utils/date");
var _hooks = require("../internals/hooks");
var _Table = _interopRequireDefault(require("./Table"));
var _CalendarContext = require("./CalendarContext");
var _excluded = ["as", "className", "classPrefix"];
var CalendarBody = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'div' : _props$as,
    className = props.className,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'calendar-body' : _props$classPrefix,
    rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  var _useCalendarContext = (0, _CalendarContext.useCalendarContext)(),
    _useCalendarContext$d = _useCalendarContext.date,
    date = _useCalendarContext$d === void 0 ? new Date() : _useCalendarContext$d,
    isoWeek = _useCalendarContext.isoWeek,
    overrideLocale = _useCalendarContext.locale,
    weekStart = _useCalendarContext.weekStart;
  var _useCustom = (0, _hooks.useCustom)('Calendar', overrideLocale),
    locale = _useCustom.locale,
    formatDate = _useCustom.formatDate;
  var thisMonthDate = (0, _date.setDate)(date, 1);
  var _useClassNames = (0, _hooks.useClassNames)(classPrefix),
    merge = _useClassNames.merge,
    withClassPrefix = _useClassNames.withClassPrefix;
  var classes = merge(className, withClassPrefix());
  return /*#__PURE__*/_react.default.createElement(Component, (0, _extends2.default)({}, rest, {
    ref: ref,
    className: classes
  }), /*#__PURE__*/_react.default.createElement(_Table.default, {
    rows: (0, _date.getWeekStartDates)(thisMonthDate, {
      isoWeek: isoWeek,
      weekStart: weekStart,
      locale: locale === null || locale === void 0 ? void 0 : locale.dateLocale
    }),
    "aria-label": formatDate(thisMonthDate, locale.formattedMonthPattern)
  }));
});
CalendarBody.displayName = 'CalendarBody';
var _default = exports.default = CalendarBody;