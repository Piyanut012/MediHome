'use client';
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _omit from "lodash/omit";
import _isFunction from "lodash/isFunction";
import _pick from "lodash/pick";
import _isNil from "lodash/isNil";
var _excluded = ["as", "id", "appearance", "cleanable", "countable", "cascade", "classPrefix", "childrenKey", "disabled", "data", "defaultValue", "defaultExpandAll", "disabledItemValues", "expandItemValues", "defaultExpandItemValues", "placeholder", "popupClassName", "popupStyle", "popupAutoWidth", "placement", "treeHeight", "toggleAs", "menuAutoWidth", "menuClassName", "menuStyle", "style", "searchBy", "searchKeyword", "showIndentLine", "searchable", "valueKey", "value", "virtualized", "uncheckableItemValues", "locale", "labelKey", "listProps", "getChildren", "renderExtraFooter", "onEnter", "onChange", "onClean", "onExit", "onSearch", "onSelect", "onSelectItem", "onScroll", "onExpand", "renderValue", "renderMenu", "renderTree", "renderTreeIcon", "renderTreeNode"];
import React, { useMemo } from 'react';
import classNames from 'classnames';
import { useCustom, useClassNames, useEventCallback } from "../internals/hooks/index.js";
import { createChainedFunction, mergeRefs } from "../internals/utils/index.js";
import { PickerToggle, onMenuKeyDown, PickerPopup, SelectedElement, PickerToggleTrigger, usePickerClassName, useToggleKeyDownEvent, usePickerRef, pickTriggerPropKeys, omitTriggerPropKeys } from "../internals/Picker/index.js";
import CheckTreeView from "../CheckTree/CheckTreeView.js";
import { getSelectedItems } from "../CheckTree/utils.js";
import useTreeValue from "../CheckTree/hooks/useTreeValue.js";
import useFlattenTree from "../Tree/hooks/useFlattenTree.js";
import useTreeWithChildren from "../Tree/hooks/useTreeWithChildren.js";
import useExpandTree from "../Tree/hooks/useExpandTree.js";
import useFocusState from "./hooks/useFocusState.js";
import { TreeProvider, useTreeImperativeHandle } from "../internals/Tree/TreeProvider.js";
/**
 * The `CheckTreePicker` component is used for selecting multiple options which are organized in a tree structure.
 *
 * @see https://rsuitejs.com/components/check-tree-picker
 */
var CheckTreePicker = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'div' : _props$as,
    id = props.id,
    _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
    _props$cleanable = props.cleanable,
    cleanable = _props$cleanable === void 0 ? true : _props$cleanable,
    _props$countable = props.countable,
    countable = _props$countable === void 0 ? true : _props$countable,
    _props$cascade = props.cascade,
    cascade = _props$cascade === void 0 ? true : _props$cascade,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,
    _props$childrenKey = props.childrenKey,
    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,
    disabled = props.disabled,
    _props$data = props.data,
    data = _props$data === void 0 ? [] : _props$data,
    _props$defaultValue = props.defaultValue,
    defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,
    _props$defaultExpandA = props.defaultExpandAll,
    defaultExpandAll = _props$defaultExpandA === void 0 ? false : _props$defaultExpandA,
    _props$disabledItemVa = props.disabledItemValues,
    disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,
    controlledExpandItemValues = props.expandItemValues,
    _props$defaultExpandI = props.defaultExpandItemValues,
    defaultExpandItemValues = _props$defaultExpandI === void 0 ? [] : _props$defaultExpandI,
    placeholder = props.placeholder,
    popupClassName = props.popupClassName,
    popupStyle = props.popupStyle,
    _props$popupAutoWidth = props.popupAutoWidth,
    popupAutoWidth = _props$popupAutoWidth === void 0 ? true : _props$popupAutoWidth,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,
    _props$treeHeight = props.treeHeight,
    treeHeight = _props$treeHeight === void 0 ? 320 : _props$treeHeight,
    toggleAs = props.toggleAs,
    _props$menuAutoWidth = props.menuAutoWidth,
    menuAutoWidth = _props$menuAutoWidth === void 0 ? popupAutoWidth : _props$menuAutoWidth,
    DEPRECATED_menuClassName = props.menuClassName,
    DEPRECATED_menuStyle = props.menuStyle,
    style = props.style,
    searchBy = props.searchBy,
    searchKeyword = props.searchKeyword,
    showIndentLine = props.showIndentLine,
    _props$searchable = props.searchable,
    searchable = _props$searchable === void 0 ? true : _props$searchable,
    _props$valueKey = props.valueKey,
    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,
    controlledValue = props.value,
    _props$virtualized = props.virtualized,
    virtualized = _props$virtualized === void 0 ? false : _props$virtualized,
    _props$uncheckableIte = props.uncheckableItemValues,
    uncheckableItemValues = _props$uncheckableIte === void 0 ? [] : _props$uncheckableIte,
    overrideLocale = props.locale,
    _props$labelKey = props.labelKey,
    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,
    listProps = props.listProps,
    getChildren = props.getChildren,
    renderExtraFooter = props.renderExtraFooter,
    onEnter = props.onEnter,
    onChange = props.onChange,
    onClean = props.onClean,
    onExit = props.onExit,
    onSearch = props.onSearch,
    onSelect = props.onSelect,
    onSelectItem = props.onSelectItem,
    onScroll = props.onScroll,
    onExpand = props.onExpand,
    renderValue = props.renderValue,
    DEPRECATED_renderMenu = props.renderMenu,
    _props$renderTree = props.renderTree,
    renderTree = _props$renderTree === void 0 ? DEPRECATED_renderMenu : _props$renderTree,
    renderTreeIcon = props.renderTreeIcon,
    renderTreeNode = props.renderTreeNode,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _usePickerRef = usePickerRef(ref),
    trigger = _usePickerRef.trigger,
    root = _usePickerRef.root,
    target = _usePickerRef.target,
    overlay = _usePickerRef.overlay,
    list = _usePickerRef.list,
    searchInput = _usePickerRef.searchInput,
    treeView = _usePickerRef.treeView;
  var _useCustom = useCustom('Picker', overrideLocale),
    locale = _useCustom.locale;
  var _useClassNames = useClassNames(classPrefix),
    prefix = _useClassNames.prefix;
  var _useTreeValue = useTreeValue(controlledValue, {
      defaultValue: defaultValue,
      uncheckableItemValues: uncheckableItemValues
    }),
    value = _useTreeValue[0],
    setValue = _useTreeValue[1];
  var itemDataKeys = {
    childrenKey: childrenKey,
    labelKey: labelKey,
    valueKey: valueKey
  };
  var _useTreeWithChildren = useTreeWithChildren(data, itemDataKeys),
    treeData = _useTreeWithChildren.treeData,
    loadingNodeValues = _useTreeWithChildren.loadingNodeValues,
    appendChild = _useTreeWithChildren.appendChild;
  var _useExpandTree = useExpandTree(data, _extends({}, itemDataKeys, {
      defaultExpandAll: defaultExpandAll,
      defaultExpandItemValues: defaultExpandItemValues,
      controlledExpandItemValues: controlledExpandItemValues,
      onExpand: onExpand,
      getChildren: getChildren,
      appendChild: appendChild
    })),
    expandItemValues = _useExpandTree.expandItemValues,
    handleExpandTreeNode = _useExpandTree.handleExpandTreeNode;
  var flattenedNodes = useFlattenTree(treeData, _extends({}, itemDataKeys, {
    uncheckableItemValues: uncheckableItemValues,
    multiple: true,
    cascade: cascade,
    value: value
  }));
  var selectedNodes = getSelectedItems(flattenedNodes, value);
  var _useTreeImperativeHan = useTreeImperativeHandle(),
    register = _useTreeImperativeHan.register,
    focusFirstNode = _useTreeImperativeHan.focusFirstNode;
  var _useFocusState = useFocusState({
      target: target,
      onEnter: onEnter,
      onExit: onExit
    }),
    focusItemValue = _useFocusState.focusItemValue,
    setFocusItemValue = _useFocusState.setFocusItemValue,
    active = _useFocusState.active,
    triggerProps = _useFocusState.triggerProps;
  var handleClean = useEventCallback(function (event) {
    var target = event.target;
    // exclude searchbox
    if (target.matches('input[role="searchbox"]') || disabled || !cleanable) {
      return;
    }
    setFocusItemValue(null);
    setValue([]);
    onChange === null || onChange === void 0 ? void 0 : onChange([], event);
  });
  var handleTreeKeyDown = useEventCallback(function (event) {
    onMenuKeyDown(event, {
      del: handleClean,
      down: function down() {
        return focusFirstNode();
      }
    });
  });
  var onPickerKeydown = useToggleKeyDownEvent(_extends({
    toggle: !focusItemValue || !active,
    trigger: trigger,
    target: target,
    overlay: overlay,
    searchInput: searchInput,
    active: active,
    onExit: handleClean,
    onMenuKeyDown: handleTreeKeyDown
  }, rest));
  var handleChange = useEventCallback(function (nextValue, event) {
    setValue(nextValue);
    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);
  });
  var treeContext = useMemo(function () {
    return {
      register: register,
      props: {
        labelKey: labelKey,
        valueKey: valueKey,
        childrenKey: childrenKey,
        virtualized: virtualized,
        renderTreeIcon: renderTreeIcon,
        renderTreeNode: renderTreeNode
      }
    };
  }, [childrenKey, labelKey, valueKey, virtualized, register, renderTreeIcon, renderTreeNode]);
  var checkTreeView = /*#__PURE__*/React.createElement(TreeProvider, {
    value: treeContext
  }, /*#__PURE__*/React.createElement(CheckTreeView, {
    ref: treeView,
    disabledItemValues: disabledItemValues,
    expandItemValues: expandItemValues,
    uncheckableItemValues: uncheckableItemValues,
    cascade: cascade,
    data: treeData,
    height: treeHeight,
    showIndentLine: showIndentLine,
    listProps: listProps,
    listRef: list,
    locale: overrideLocale,
    searchBy: searchBy,
    searchable: searchable,
    searchKeyword: searchKeyword,
    searchInputRef: searchInput,
    onScroll: onScroll,
    onSelect: onSelect,
    onSelectItem: onSelectItem,
    onExpand: handleExpandTreeNode,
    onSearch: onSearch,
    onChange: handleChange,
    onFocusItem: setFocusItemValue,
    value: value,
    loadingNodeValues: loadingNodeValues,
    flattenedNodes: flattenedNodes
  }));
  var renderTreeView = function renderTreeView(positionProps, speakerRef) {
    var left = positionProps.left,
      top = positionProps.top,
      className = positionProps.className;
    var classes = classNames(className, popupClassName, DEPRECATED_menuClassName, prefix('check-tree-menu'));
    var mergedMenuStyle = _extends({}, popupStyle, DEPRECATED_menuStyle, {
      left: left,
      top: top
    });
    return /*#__PURE__*/React.createElement(PickerPopup, {
      ref: mergeRefs(overlay, speakerRef),
      autoWidth: menuAutoWidth,
      className: classes,
      style: mergedMenuStyle,
      onKeyDown: onPickerKeydown,
      target: trigger
    }, renderTree ? renderTree(checkTreeView) : checkTreeView, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());
  };

  /**
   * 1.Have a value and the value is valid.
   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.
   */
  var hasValidValue = selectedNodes.length > 0 || value.length > 0 && _isFunction(renderValue);
  var selectedElement = placeholder;
  if (hasValidValue) {
    selectedElement = /*#__PURE__*/React.createElement(SelectedElement, {
      selectedItems: selectedNodes,
      countable: countable,
      valueKey: valueKey,
      labelKey: labelKey,
      childrenKey: childrenKey,
      prefix: prefix,
      cascade: cascade,
      locale: locale
    });
    if (_isFunction(renderValue)) {
      selectedElement = renderValue(value, selectedNodes, selectedElement);
      if (_isNil(selectedElement)) {
        hasValidValue = false;
      }
    }
  }
  var _usePickerClassName = usePickerClassName(_extends({}, props, {
      classPrefix: classPrefix,
      appearance: appearance,
      countable: countable,
      cleanable: cleanable,
      disabled: disabled,
      hasValue: hasValidValue,
      name: 'check-tree'
    })),
    classes = _usePickerClassName[0],
    usedClassNamePropKeys = _usePickerClassName[1];
  return /*#__PURE__*/React.createElement(PickerToggleTrigger, _extends({
    id: id,
    popupType: "tree",
    multiple: true,
    pickerProps: _pick(props, pickTriggerPropKeys),
    ref: trigger,
    placement: placement,
    speaker: renderTreeView
  }, triggerProps), /*#__PURE__*/React.createElement(Component, {
    className: classes,
    style: style,
    ref: root
  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, _omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {
    ref: target,
    appearance: appearance,
    onKeyDown: onPickerKeydown,
    onClean: createChainedFunction(handleClean, onClean),
    cleanable: cleanable && !disabled,
    disabled: disabled,
    as: toggleAs,
    hasValue: hasValidValue,
    active: active,
    placement: placement,
    inputValue: value,
    focusItemValue: focusItemValue
  }), selectedElement || locale.placeholder)));
});
CheckTreePicker.displayName = 'CheckTreePicker';
export default CheckTreePicker;