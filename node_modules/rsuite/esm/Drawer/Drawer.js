'use client';
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["className", "placement", "classPrefix", "animation", "closeButton"];
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import Slide from "../Animation/Slide.js";
import Modal from "../Modal/index.js";
import { useClassNames } from "../internals/hooks/index.js";
import { deprecateComponent } from "../internals/utils/index.js";
import DrawerContext from "./DrawerContext.js";
import { oneOf } from "../internals/propTypes/index.js";
import DrawerBody from "./DrawerBody.js";
import DrawerHeader from "./DrawerHeader.js";
import DrawerActions from "./DrawerActions.js";
import DrawerFooter from "./DrawerFooter.js";
import DrawerTitle from "./DrawerTitle.js";
/**
 * The Drawer component is used to display extra content from a main content.
 * @see https://rsuitejs.com/components/drawer
 */
var Drawer = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'right' : _props$placement,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'drawer' : _props$classPrefix,
    _props$animation = props.animation,
    animation = _props$animation === void 0 ? Slide : _props$animation,
    _props$closeButton = props.closeButton,
    closeButton = _props$closeButton === void 0 ? true : _props$closeButton,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useClassNames = useClassNames(classPrefix),
    merge = _useClassNames.merge,
    prefix = _useClassNames.prefix;
  var classes = merge(className, prefix(placement));
  var animationProps = {
    placement: placement
  };
  var contextValue = useMemo(function () {
    return {
      closeButton: closeButton,
      isDrawer: true
    };
  }, [closeButton]);
  return /*#__PURE__*/React.createElement(DrawerContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React.createElement(Modal, _extends({}, rest, {
    ref: ref,
    overflow: false,
    classPrefix: classPrefix,
    className: classes,
    animation: animation,
    animationProps: animationProps
  })));
});
DrawerBody.displayName = 'DrawerBody';
DrawerHeader.displayName = 'DrawerHeader';
DrawerActions.displayName = 'DrawerActions';
DrawerFooter.displayName = 'DrawerFooter';
DrawerTitle.displayName = 'DrawerTitle';
Drawer.Body = DrawerBody;
Drawer.Header = DrawerHeader;
Drawer.Actions = DrawerActions;
Drawer.Footer = deprecateComponent(DrawerFooter, '<Drawer.Footer> has been deprecated, use <Drawer.Actions> instead.');
Drawer.Title = DrawerTitle;
Drawer.displayName = 'Drawer';
Drawer.propTypes = _extends({}, Modal.propTypes, {
  classPrefix: PropTypes.string,
  placement: oneOf(['top', 'right', 'bottom', 'left']),
  children: PropTypes.node,
  className: PropTypes.string
});
export default Drawer;