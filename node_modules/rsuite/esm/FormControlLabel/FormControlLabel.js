'use client';
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["as", "classPrefix", "htmlFor", "className", "id"];
import React from 'react';
import PropTypes from 'prop-types';
import { useClassNames } from "../internals/hooks/index.js";
import { useFormGroup } from "../FormGroup/index.js";
/**
 * The `<Form.ControlLabel>` component renders a label with required indicator, for form controls.
 * @see https://rsuitejs.com/components/form/
 */
var FormControlLabel = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useFormGroup = useFormGroup(),
    labelId = _useFormGroup.labelId,
    controlId = _useFormGroup.controlId;
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'label' : _props$as,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'form-control-label' : _props$classPrefix,
    _props$htmlFor = props.htmlFor,
    htmlFor = _props$htmlFor === void 0 ? controlId : _props$htmlFor,
    className = props.className,
    _props$id = props.id,
    id = _props$id === void 0 ? labelId : _props$id,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useClassNames = useClassNames(classPrefix),
    withClassPrefix = _useClassNames.withClassPrefix,
    merge = _useClassNames.merge;
  var classes = merge(className, withClassPrefix());
  return /*#__PURE__*/React.createElement(Component, _extends({
    id: id,
    htmlFor: htmlFor
  }, rest, {
    ref: ref,
    className: classes
  }));
});
FormControlLabel.displayName = 'FormControlLabel';
FormControlLabel.propTypes = {
  className: PropTypes.string,
  htmlFor: PropTypes.string,
  classPrefix: PropTypes.string
};
export default FormControlLabel;