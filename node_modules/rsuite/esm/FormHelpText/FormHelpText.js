'use client';
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["as", "classPrefix", "className", "tooltip", "children", "id"];
import React from 'react';
import PropTypes from 'prop-types';
import Tooltip from "../Tooltip/index.js";
import Whisper from "../Whisper/index.js";
import { useClassNames } from "../internals/hooks/index.js";
import { useFormGroup } from "../FormGroup/index.js";
import HelpIcon from '@rsuite/icons/legacy/HelpO';
/**
 * The `<Form.HelpText>` component is used to display help information in the form.
 * @see https://rsuitejs.com/components/form/
 */
var FormHelpText = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useFormGroup = useFormGroup(),
    helpTextId = _useFormGroup.helpTextId;
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'span' : _props$as,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'form-help-text' : _props$classPrefix,
    className = props.className,
    tooltip = props.tooltip,
    children = props.children,
    _props$id = props.id,
    id = _props$id === void 0 ? helpTextId : _props$id,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useClassNames = useClassNames(classPrefix),
    withClassPrefix = _useClassNames.withClassPrefix,
    merge = _useClassNames.merge;
  var classes = merge(className, withClassPrefix({
    tooltip: tooltip
  }));
  if (tooltip) {
    return /*#__PURE__*/React.createElement(Whisper, {
      ref: ref,
      placement: "topEnd",
      speaker: /*#__PURE__*/React.createElement(Tooltip, _extends({
        id: id
      }, rest), children)
    }, /*#__PURE__*/React.createElement(Component, {
      role: "img",
      "aria-label": "help",
      className: classes
    }, /*#__PURE__*/React.createElement(HelpIcon, {
      "aria-hidden": true
    })));
  }
  return /*#__PURE__*/React.createElement(Component, _extends({
    id: id
  }, rest, {
    ref: ref,
    className: classes
  }), children);
});
FormHelpText.displayName = 'FormHelpText';
FormHelpText.propTypes = {
  className: PropTypes.string,
  tooltip: PropTypes.bool,
  children: PropTypes.node,
  classPrefix: PropTypes.string
};
export default FormHelpText;