'use client';
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _templateObject;
var _excluded = ["as", "accepter", "classPrefix", "checkAsync", "checkTrigger", "errorPlacement", "errorMessage", "name", "value", "readOnly", "plaintext", "disabled", "onChange", "onBlur", "defaultValue", "shouldResetWithUnmount", "rule", "id"];
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import Input from "../Input/index.js";
import FormErrorMessage from "../FormErrorMessage/index.js";
import { useClassNames } from "../internals/hooks/index.js";
import FormContext, { FormValueContext } from "../Form/FormContext.js";
import { useFormGroup } from "../FormGroup/index.js";
import { useWillUnmount, useEventCallback } from "../internals/hooks/index.js";
import { oneOf } from "../internals/propTypes/index.js";
import useRegisterModel from "./hooks/useRegisterModel.js";
import useField from "./hooks/useField.js";
import Toggle from "../Toggle/index.js";

/**
 * Props that FormControl passes to its accepter
 */

/**
 * The `<Form.Control>` component is used to wrap the components that need to be validated.
 * @see https://rsuitejs.com/components/form/
 */
var FormControl = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _accepterProps;
  var _useContext = useContext(FormContext),
    readOnlyContext = _useContext.readOnly,
    plaintextContext = _useContext.plaintext,
    disabledContext = _useContext.disabled,
    errorFromContext = _useContext.errorFromContext,
    formError = _useContext.formError,
    nestedField = _useContext.nestedField,
    removeFieldValue = _useContext.removeFieldValue,
    removeFieldError = _useContext.removeFieldError,
    onFieldChange = _useContext.onFieldChange,
    contextCheckTrigger = _useContext.checkTrigger,
    checkFieldForNextValue = _useContext.checkFieldForNextValue,
    checkFieldAsyncForNextValue = _useContext.checkFieldAsyncForNextValue;
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'div' : _props$as,
    _props$accepter = props.accepter,
    AccepterComponent = _props$accepter === void 0 ? Input : _props$accepter,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'form-control' : _props$classPrefix,
    checkAsync = props.checkAsync,
    checkTrigger = props.checkTrigger,
    _props$errorPlacement = props.errorPlacement,
    errorPlacement = _props$errorPlacement === void 0 ? 'bottomStart' : _props$errorPlacement,
    errorMessage = props.errorMessage,
    name = props.name,
    value = props.value,
    _props$readOnly = props.readOnly,
    readOnly = _props$readOnly === void 0 ? readOnlyContext : _props$readOnly,
    _props$plaintext = props.plaintext,
    plaintext = _props$plaintext === void 0 ? plaintextContext : _props$plaintext,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? disabledContext : _props$disabled,
    onChange = props.onChange,
    onBlur = props.onBlur,
    defaultValue = props.defaultValue,
    _props$shouldResetWit = props.shouldResetWithUnmount,
    shouldResetWithUnmount = _props$shouldResetWit === void 0 ? false : _props$shouldResetWit,
    rule = props.rule,
    id = props.id,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useFormGroup = useFormGroup(id),
    controlId = _useFormGroup.controlId,
    helpTextId = _useFormGroup.helpTextId,
    labelId = _useFormGroup.labelId,
    errorMessageId = _useFormGroup.errorMessageId;
  if (!onFieldChange) {
    throw new Error("\n      <FormControl> must be inside a component decorated with <Form>.\n      And need to update React to 16.6.0 +.\n    ");
  }
  useRegisterModel(name, rule);
  useWillUnmount(function () {
    if (shouldResetWithUnmount) {
      removeFieldValue === null || removeFieldValue === void 0 ? void 0 : removeFieldValue(name);
      removeFieldError === null || removeFieldError === void 0 ? void 0 : removeFieldError(name);
    }
  });
  var trigger = checkTrigger || contextCheckTrigger;
  var formValue = useContext(FormValueContext);
  var _useField = useField({
      name: name,
      errorMessage: errorMessage,
      formValue: formValue,
      formError: formError,
      value: value,
      nestedField: nestedField,
      errorFromContext: errorFromContext
    }),
    fieldValue = _useField.fieldValue,
    fieldError = _useField.fieldError,
    setFieldValue = _useField.setFieldValue;
  var _useClassNames = useClassNames(classPrefix),
    withClassPrefix = _useClassNames.withClassPrefix,
    prefix = _useClassNames.prefix;
  var classes = withClassPrefix('wrapper');
  var handleFieldChange = useEventCallback(function (value, event) {
    if (trigger === 'change') {
      handleFieldCheck(value);
    }
    onFieldChange === null || onFieldChange === void 0 ? void 0 : onFieldChange(name, value, event);
    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);
  });
  var handleFieldBlur = useEventCallback(function (event) {
    if (trigger === 'blur') {
      handleFieldCheck(fieldValue);
    }
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
  });
  var handleFieldCheck = useEventCallback(function (value) {
    var nextFormValue = setFieldValue(name, value);
    if (checkAsync) {
      checkFieldAsyncForNextValue(name, nextFormValue);
    } else {
      checkFieldForNextValue(name, nextFormValue);
    }
  });
  var fieldHasError = Boolean(fieldError);

  // Toggle component is a special case that uses `checked` and `defaultChecked` instead of `value` and `defaultValue` props.
  var valueKey = AccepterComponent === Toggle ? 'checked' : 'value';
  var accepterProps = (_accepterProps = {}, _accepterProps[valueKey] = fieldValue === undefined ? defaultValue : fieldValue, _accepterProps);
  return /*#__PURE__*/React.createElement(Component, {
    className: classes,
    ref: ref,
    "data-testid": "form-control-wrapper"
  }, /*#__PURE__*/React.createElement(AccepterComponent, _extends({
    id: controlId,
    "aria-labelledby": labelId,
    "aria-describedby": helpTextId,
    "aria-invalid": fieldHasError || undefined,
    "aria-errormessage": fieldHasError ? errorMessageId : undefined
  }, accepterProps, rest, {
    readOnly: readOnly,
    plaintext: plaintext,
    disabled: disabled,
    name: name,
    onChange: handleFieldChange,
    onBlur: handleFieldBlur
  })), /*#__PURE__*/React.createElement(FormErrorMessage, {
    id: errorMessageId,
    role: "alert",
    "aria-relevant": "all",
    show: fieldHasError,
    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["message-wrapper"]))),
    placement: errorPlacement
  }, fieldError));
});
FormControl.displayName = 'FormControl';
FormControl.propTypes = {
  name: PropTypes.string.isRequired,
  checkTrigger: oneOf(['change', 'blur', 'none']),
  checkAsync: PropTypes.bool,
  accepter: PropTypes.any,
  onChange: PropTypes.func,
  onBlur: PropTypes.func,
  classPrefix: PropTypes.string,
  errorMessage: PropTypes.node,
  errorPlacement: oneOf(['bottomStart', 'bottomEnd', 'topStart', 'topEnd', 'leftStart', 'rightStart', 'leftEnd', 'rightEnd']),
  value: PropTypes.any
};
export default FormControl;