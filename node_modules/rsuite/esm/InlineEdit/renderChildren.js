'use client';
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["onBlur"];
import React from 'react';
import Input from "../Input/index.js";
export function defaultRenderInput(props, ref) {
  return /*#__PURE__*/React.createElement(Input, _extends({
    ref: ref
  }, props));
}
var pickers = ['DatePicker', 'DateRangePicker', 'InputPicker', 'TagPicker', 'Cascader', 'MultiCascader', 'SelectPicker', 'CheckPicker', 'CheckTreePicker', 'TreePicker'];
function getDisplayName(Component) {
  var _Component$type;
  if (typeof (Component === null || Component === void 0 ? void 0 : Component.type) === 'string') {
    return Component === null || Component === void 0 ? void 0 : Component.type;
  }
  return (Component === null || Component === void 0 ? void 0 : (_Component$type = Component.type) === null || _Component$type === void 0 ? void 0 : _Component$type.displayName) || '';
}
export function renderChildren(children, props, ref) {
  if (typeof children === 'function') {
    return children(props, ref);
  }
  if (pickers.includes(getDisplayName(children))) {
    var onBlur = props.onBlur,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

    // if the children is a picker, we should pass the onBlur to the onClose
    return /*#__PURE__*/React.cloneElement(children, _extends({}, rest, {
      onClose: onBlur,
      ref: ref
    }));
  }
  return /*#__PURE__*/React.cloneElement(children, _extends({}, props, {
    ref: ref
  }));
}