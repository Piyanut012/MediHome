'use client';
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["as", "bodyFill", "bodyProps", "bordered", "children", "className", "classPrefix", "caretAs", "collapsible", "defaultExpanded", "disabled", "eventKey", "expanded", "header", "headerRole", "panelRole", "shaded", "scrollShadow", "id", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onSelect"];
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import { useClassNames, useUniqueId, useEventCallback } from "../internals/hooks/index.js";
import { PanelGroupContext } from "../PanelGroup/index.js";
import PanelHeader from "./PanelHeader.js";
import PanelBody from "./PanelBody.js";
import useExpanded from "./hooks/useExpanded.js";
/**
 * The `Panel` component is used to display content that can be collapsed.
 * @see https://rsuitejs.com/components/panel
 */
var Panel = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'div' : _props$as,
    bodyFill = props.bodyFill,
    bodyProps = props.bodyProps,
    bordered = props.bordered,
    children = props.children,
    className = props.className,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'panel' : _props$classPrefix,
    caretAs = props.caretAs,
    collapsibleProp = props.collapsible,
    defaultExpanded = props.defaultExpanded,
    disabled = props.disabled,
    eventKey = props.eventKey,
    expandedProp = props.expanded,
    header = props.header,
    headerRole = props.headerRole,
    _props$panelRole = props.panelRole,
    panelRole = _props$panelRole === void 0 ? 'region' : _props$panelRole,
    shaded = props.shaded,
    scrollShadow = props.scrollShadow,
    idProp = props.id,
    onEnter = props.onEnter,
    onEntered = props.onEntered,
    onEntering = props.onEntering,
    onExit = props.onExit,
    onExited = props.onExited,
    onExiting = props.onExiting,
    onSelect = props.onSelect,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var id = useUniqueId('rs-', idProp);
  var bodyId = id + "-panel";
  var buttonId = id + "-btn";
  var _useClassNames = useClassNames(classPrefix),
    merge = _useClassNames.merge,
    withClassPrefix = _useClassNames.withClassPrefix;
  var _ref = useContext(PanelGroupContext) || {},
    onGroupSelect = _ref.onGroupSelect;
  var _useExpanded = useExpanded({
      expanded: expandedProp,
      defaultExpanded: defaultExpanded,
      eventKey: eventKey,
      collapsible: collapsibleProp
    }),
    expanded = _useExpanded[0],
    setExpanded = _useExpanded[1],
    collapsible = _useExpanded[2];
  var handleSelect = useEventCallback(function (event) {
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);
    onGroupSelect === null || onGroupSelect === void 0 ? void 0 : onGroupSelect(eventKey, event);
    setExpanded(!expanded);
  });
  var classes = merge(className, withClassPrefix({
    in: expanded,
    collapsible: collapsible,
    bordered: bordered,
    shaded: shaded
  }));
  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {
    ref: ref,
    className: classes,
    id: idProp
  }), header && /*#__PURE__*/React.createElement(PanelHeader, {
    collapsible: collapsible,
    expanded: expanded,
    caretAs: caretAs,
    role: headerRole,
    buttonId: buttonId,
    bodyId: bodyId,
    disabled: disabled,
    onClickButton: handleSelect
  }, header), /*#__PURE__*/React.createElement(PanelBody, _extends({
    collapsible: collapsible,
    expanded: expanded,
    bodyFill: bodyFill,
    role: panelRole,
    id: bodyId,
    scrollShadow: scrollShadow,
    labelId: buttonId,
    onEnter: onEnter,
    onEntering: onEntering,
    onEntered: onEntered,
    onExit: onExit,
    onExiting: onExiting,
    onExited: onExited
  }, bodyProps), children));
});
Panel.displayName = 'Panel';
Panel.propTypes = {
  collapsible: PropTypes.bool,
  bordered: PropTypes.bool,
  shaded: PropTypes.bool,
  bodyFill: PropTypes.bool,
  header: PropTypes.any,
  defaultExpanded: PropTypes.bool,
  expanded: PropTypes.bool,
  eventKey: PropTypes.any,
  panelRole: PropTypes.string,
  classPrefix: PropTypes.string,
  children: PropTypes.node,
  onSelect: PropTypes.func,
  onEnter: PropTypes.func,
  onEntering: PropTypes.func,
  onEntered: PropTypes.func,
  onExit: PropTypes.func,
  onExiting: PropTypes.func,
  onExited: PropTypes.func,
  className: PropTypes.string
};
export default Panel;