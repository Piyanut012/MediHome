'use client';
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["icon", "placement", "children", "circle", "classPrefix", "className"];
import React from 'react';
import PropTypes from 'prop-types';
import { oneOf } from "../internals/propTypes/index.js";
import { useClassNames } from "../internals/hooks/index.js";
import Button from "../Button/index.js";
/**
 * The `IconButton` component is used to specify a button with icon.
 * @see https://rsuitejs.com/components/button
 */
var IconButton = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var icon = props.icon,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'left' : _props$placement,
    children = props.children,
    circle = props.circle,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'btn-icon' : _props$classPrefix,
    className = props.className,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useClassNames = useClassNames(classPrefix),
    merge = _useClassNames.merge,
    withClassPrefix = _useClassNames.withClassPrefix;
  var classes = merge(className, withClassPrefix("placement-" + placement, {
    circle: circle,
    'with-text': typeof children !== 'undefined'
  }));
  return /*#__PURE__*/React.createElement(Button, _extends({}, rest, {
    ref: ref,
    className: classes
  }), icon, children);
});
IconButton.displayName = 'IconButton';
IconButton.propTypes = {
  className: PropTypes.string,
  icon: PropTypes.any,
  classPrefix: PropTypes.string,
  circle: PropTypes.bool,
  children: PropTypes.node,
  placement: oneOf(['left', 'right'])
};
export default IconButton;